name: Update Project Dates (no PAT)

on:
  schedule:
    - cron: '0 12,18 * * *'
  workflow_dispatch:

permissions: write-all

jobs:
  update-dates:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Update Dates
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Use GITHUB_TOKEN
          REPO_OWNER: ${{ github.repository_owner }}  # Repository owner
          REPO_NAME: ${{ github.event.repository.name }}  # Repository name
        run: |
          # Install dependencies
          sudo apt-get -y install jq

          # Debug repository info
          echo "Repository Owner: $REPO_OWNER"
          echo "Repository Name: $REPO_NAME"

          # Fetch all repository-level projects
          PROJECTS_JSON=$(gh api graphql -f query='
            query($owner: String!, $repo: String!) {
              repository(owner: $owner, name: $repo) {
                projectsV2(first: 100) {
                  nodes {
                    id
                    number
                    title
                  }
                }
              }
            }' -f owner=$REPO_OWNER -f repo=$REPO_NAME | jq -r '.data.repository.projectsV2.nodes')

          # Debug projects
          echo "Projects: $PROJECTS_JSON"

          # Process each project
          echo "$PROJECTS_JSON" | jq -c '.[]' | while read -r PROJECT; do
            PROJECT_ID=$(echo "$PROJECT" | jq -r '.id')
            PROJECT_NUMBER=$(echo "$PROJECT" | jq -r '.number')
            PROJECT_TITLE=$(echo "$PROJECT" | jq -r '.title')

            echo "Processing project: $PROJECT_TITLE (ID: $PROJECT_ID, Number: $PROJECT_NUMBER)"

            # Get Field IDs
            FIELDS_JSON=$(gh api graphql -f query='
              query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    fields(first: 20) {
                      nodes {
                        ... on ProjectV2Field {
                            id
                            name
                        }
                        ... on ProjectV2SingleSelectField {
                            id
                            name
                        }
                      }
                    }
                  }
                }
              }' -f projectId=$PROJECT_ID | jq -r '.data.node.fields.nodes')
            
            STATUS_FIELD_ID=$(echo "$FIELDS_JSON" | jq -r '.[] | select(.name == "Status") | .id')
            START_DATE_FIELD_ID=$(echo "$FIELDS_JSON" | jq -r '.[] | select(.name == "Start Date") | .id')
            END_DATE_FIELD_ID=$(echo "$FIELDS_JSON" | jq -r '.[] | select(.name == "End Date") | .id')
            
            # Get all project items
            ITEMS_JSON=$(gh api graphql -f query='
                  query($projectId: ID!) {
                    node(id: $projectId) {
                      ... on ProjectV2 {
                        items(first: 100) {
                          nodes {
                            id
                            fieldValues(first: 20) {
                              nodes {
                                ... on ProjectV2ItemFieldSingleSelectValue {
                                  name
                                  field {
                                    ... on ProjectV2FieldCommon {
                                      id
                                    }
                                  }
                                }
                                ... on ProjectV2ItemFieldDateValue {
                                  date
                                  field {
                                    ... on ProjectV2FieldCommon {
                                      id
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }' -f projectId=$PROJECT_ID | jq -r '.data.node.items.nodes')
            
            # Process items
            echo "$ITEMS_JSON" | jq -c '.[]' | while read -r ITEM; do
              ITEM_ID=$(echo "$ITEM" | jq -r '.id')
              STATUS=$(echo "$ITEM" | jq -r '.fieldValues.nodes[] | select(.field.id == "'$STATUS_FIELD_ID'") | .name')
              START_DATE=$(echo "$ITEM" | jq -r '.fieldValues.nodes[] | select(.field.id == "'$START_DATE_FIELD_ID'") | .date')
              END_DATE=$(echo "$ITEM" | jq -r '.fieldValues.nodes[] | select(.field.id == "'$END_DATE_FIELD_ID'") | .date')
            
              TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            
              # Debug statements
              echo "Processing item: $ITEM_ID"
              echo "Status: $STATUS"
              echo "Start Date: $START_DATE"
              echo "End Date: $END_DATE"
            
              if [ "$STATUS" = "In Progress" ] && [ -z "$START_DATE" ]; then
                echo "Setting Start Date for $ITEM_ID"
                gh api graphql -f query='
                  mutation ($projectId: ID!, $itemId: ID!, $fieldId: ID!, $date: Date!) {
                    updateProjectV2ItemFieldValue(
                      input: {
                        projectId: $projectId,
                        itemId: $itemId,
                        fieldId: $fieldId,
                        value: { date: $date }
                      }
                    ) { clientMutationId }
                  }' -f projectId=$PROJECT_ID -f itemId=$ITEM_ID -f fieldId=$START_DATE_FIELD_ID -f date=$TIMESTAMP
              fi
            
              if [ "$STATUS" = "Done" ] && [ -z "$END_DATE" ]; then
                echo "Setting End Date for $ITEM_ID"
                gh api graphql -f query='
                  mutation ($projectId: ID!, $itemId: ID!, $fieldId: ID!, $date: Date!) {
                    updateProjectV2ItemFieldValue(
                      input: {
                        projectId: $projectId,
                        itemId: $itemId,
                        fieldId: $fieldId,
                        value: { date: $date }
                      }
                    ) { clientMutationId }
                  }' -f projectId=$PROJECT_ID -f itemId=$ITEM_ID -f fieldId=$END_DATE_FIELD_ID -f date=$TIMESTAMP
              fi
            done
          done
